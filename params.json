{"name":"Geminga","tagline":"","body":"Geminga\r\n=======\r\nGeminga is a neutron star in the constellation Gemini.\r\n\r\n![alt Gemingas Web Interface](https://raw.githubusercontent.com/RandomByte/Geminga/master/stuff/demo.png)\r\n\r\nThis however is a node.js powered interface that let's you monitor all the computers and servers you administrate and enables you to run actions on or with them. Already implemented are actions like Wake-on-Lan, Shutdown, starting and stopping a VPN service. The UI is based on [Bootstrap](http://getbootstrap.com/) which makes it responsive, intuitive and nice to look at.\r\n\r\n### Little explanation:\r\n- **Server side actions** don't need the remote node to run a [Geminga-Remote](https://github.com/RandomByte/Geminga-Remote) instance (e.g. Wake-on-Lan)\r\n- **Remote side actions** need a running [Geminga-Remote](https://github.com/RandomByte/Geminga-Remote) instance on the remote node (e.g. Shutdown or start/stop VPN)\r\n\r\nIt's very easy to add your own actions on server and/or remote side. The UI will adapt them automatically based on your configuration.\r\n\r\n# Installation\r\n1. Clone this repository\r\n2. Run '$ npm install' to install all dependencies\r\n3. Copy config.example.json to config.json and fill it with your data (see chapter \"Configuration\")\r\n4. Run geminga.js! For example using [supervisor](https://github.com/isaacs/node-supervisor) '$ supervisor -q geminga.js >> /var/log/geminga.log'\r\n\r\n# Remote nodes\r\nSee [Geminga-Remote](https://github.com/RandomByte/Geminga-Remote)\r\n\r\nOnly needed to execute actions on the remote node (not for Wake-on-Lan or simple online/offline check using a ping)\r\n\r\n# Configuration\r\n\r\n- **Port:** The port the web interface should run on\r\n- **Password:** The password protecting the web interface\r\n- **Cookie- and Session Secrets:** Enter some random strings (including special characters) to ensure all cookies are properly signed and encrypted\r\n- **Resources** (can be PCs, servers, arduinos, whatever is connected to a network...)\r\n  - **Name and ID:** To identify the resource in the web interface\r\n  - **IP or Hostname:** IP will always overrule hostname. Typically you specify one *or* the other\r\n  - **MAC-Address:** Used for Wake-on-Lan\r\n  - **Location:** Will be displayed in the web interface\r\n  - **Actions:** All the actions supported for the remote node\r\n  - **Token:** The token to be used for communication with the remote node. Every remote node can generate a token itself by running '$node geminga-remote.js token'. Just copy the output in your config here.\r\n\r\n### This is the example configuration you can find in config.example.json:\r\n```\r\n{\r\n    \"port\": 3000,\r\n    \"password\": \"The password I have to remember\",\r\n    \"cookieSecret\": \"My little secret\",\r\n    \"sessionSecret\": \"My other secret\",\r\n    \"resources\": [\r\n        {\r\n            \"name\": \"My beloved server\",\r\n            \"id\": \"beloved-server\",\r\n            \"ip\": \"123.213.231.121\",\r\n            \"hostname\": \"example.com\", // alternative to ip\r\n            \"mac\": \"12:ab:34:cd:56:ef\",\r\n            \"location\": \"In the clouds\",\r\n            \"actions\": [\"wake\", \"shutdown\", \"vpn-start\", \"vpn-stop\"],\r\n            \"token\": \"<get this from your geminga remote node>\"\r\n        }\r\n    ]\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}